/*
 * =========================================================================================
 * Copyright Â© 2013-2018 the kamon project <http://kamon.io/>
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 * =========================================================================================
 */


plugins {
    id 'java'
    id 'scala'
    id 'maven-publish'
    id 'com.github.maiflai.scalatest' version '0.25'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

configurations {
    kamonInstrumentationBundle
}

dependencies {
    compile 'com.typesafe:config:1.3.4'
    compile 'net.jodah:expiringmap:0.5.9'
    compile 'org.tinylog:tinylog:1.3.6'
    compile 'com.github.tobiasrm:tinylog-coloredconsole:1.3.1'
    compile 'net.bytebuddy:byte-buddy-agent:1.9.13'

    compile files('libs/byte-buddy-1.9.13.jar')

    testCompile 'org.mockito:mockito-core:2.28.2'
    testCompile 'org.scalatest:scalatest_2.12:3.0.1'
    testCompile "org.scala-lang:scala-library:${scala_version}"
    testRuntime 'org.pegdown:pegdown:1.4.2'
}

def agentBootstrapClasses = 'kanela/agent/bootstrap/**'

task bootstrapJar(type: Jar) {
    // Output to 'bootstrap.jar'.
    baseName = 'bootstrap'
    version = null

    from sourceSets.main.output
    include agentBootstrapClasses
}

shadowJar.dependsOn bootstrapJar

shadowJar {
    baseName = 'kanela-agent'
    classifier = null

    mergeServiceFiles {
       path = 'META-INF/services/org.pmw.tinylog.*'
    }

    exclude 'META-INF/services/javax.*'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'tinylog.properties'

    //exclude agentBootstrapClasses

    relocate 'net.bytebuddy', 'kanela.agent.libs.net.bytebuddy'
    relocate 'io.vavr', 'kanela.agent.libs.io.vavr'
    relocate 'com.typesafe.config', 'kanela.agent.libs.com.typesafe.config'
    relocate 'org.pmw.tinylog', 'kanela.agent.libs.org.pmw.tinylog'
    relocate 'net.jodah', 'kanela.agent.libs.net.jodah'

    relocate ('com.github.tobiasrm', 'kanela.agent.libs.com.github.tobiasrm') {
        exclude 'com.github.tobiasrm.Main.class'
    }

    dependencies {
        exclude('org.projectlombok:lombok:1.18.6')
    }

    doLast {
        def agentBootstrapJar = 'kanela/agent/bootstrap.jar'

        // Bundle bootstrap.jar.
        ant.jar(update: 'true', destfile: shadowJar.archivePath) {
            mappedresources {
                fileset(file: bootstrapJar.archivePath)
                globmapper(from: '*', to: agentBootstrapJar)
            }
        }
    }
}

jar {
    manifest {
        attributes 'Built-By': System.getProperty("user.name")
        attributes 'Build-Jdk': System.getProperty("java.version")
        attributes 'Premain-Class': "kanela.agent.Kanela"
        attributes 'Agent-Class': "kanela.agent.Kanela"
        attributes 'Main-Class': "kanela.agent.attacher.Attacher"
        attributes 'Can-Redefine-Classes': "true"
        attributes 'Can-Set-Native-Method-Prefix': "true"
        attributes 'Can-Retransform-Classes': "true"
    }
}

jar.finalizedBy shadowJar

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['shadowPublication']

    pkg {
        repo = 'releases'
        name = 'kanela'
        userOrg = 'kamon-io'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/kamon-io/kanela'

        version {
            name = "${project.version}"
            desc = 'Kanela'
            released  = new Date()
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "dpsoft"
            name "Diego Parra"
            url "https://twitter.com/diegolparra"
        }

        developer {
            id "ivantopo"
            name "Ivan Topolnjak"
            url "https://twitter.com/ivantopo"
        }

        developer {
            id "cspinetta"
            name "Cristian Spinetta"
            url "https://twitter.com/c_spinetta"
        }
    }

    scm {
       url "https://github.com/kamon-io/kanela"
    }
}

publishing {
    publications {
        shadowPublication(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifact sourcesJar
            artifact javadocJar
            groupId 'io.kamon'
            artifactId 'kanela-agent'
            version "${project.version}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'The Kamon Instrumentation Agent')
                root.appendNode('name', 'Kanela')
                root.appendNode('url', 'http://kamon.io')
                root.children().last() + pomConfig
            }
        }
    }
}

task createBuildInfoFile(dependsOn: processResources) {
    doLast {
        def file = new File("$buildDir/resources/main/build-info.properties")
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props.setProperty('timestamp', new Date().toString())
        props.store file.newWriter(), null
    }
}

classes {
    dependsOn createBuildInfoFile
}
