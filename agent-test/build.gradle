/*
 * =========================================================================================
 * Copyright Â© 2013-2017 the kamon project <http://kamon.io/>
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 * =========================================================================================
 */


plugins {
    id 'java'
    id 'scala'
    id 'com.github.maiflai.scalatest' version '0.18'
}

configurations {
    provided
    agent
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {
    compile 'org.scala-lang:scala-library:2.12.4'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    compile 'io.kamon:kamon-autoweave_2.12:0.6.5'

    provided 'io.kamon:agent-scala-extension_2.12:0.0.8-experimental'
    provided 'io.kamon:kamon-agent:0.0.75-experimental'

    testCompile 'org.scalatest:scalatest_2.12:3.0.1'
    testRuntime 'org.pegdown:pegdown:1.4.2'

    agent 'io.kamon:kamon-agent:0.0.75-experimental'
}

//run.doFirst {
//    jvmArgs "-javaagent:${configurations.agent.singleFile}"
//}
def KamonAgentTestRunning = null

def singleTests = [
        [taskName: 'TaskMultiMixinsInstrumentationSpec', clazz: 'app.kamon.specs.MultiMixinsInstrumentationSpec',
         jvmArgs: ['-Dkamon.agent.modules.test-module.instrumentations.0=app.kamon.instrumentation.MultiMixinsInstrumentation']],
        [taskName: 'TaskSimpleInstrumentationSpec', clazz: 'app.kamon.specs.SimpleInstrumentationSpec',
         jvmArgs: ['-Dkamon.agent.modules.test-module.instrumentations.0=app.kamon.instrumentation.SimpleInstrumentation']],
        [taskName: 'TaskAttachInRuntimeSpec', clazz: 'app.kamon.specs.AttachInRuntimeSpec', attachKamonAgent: false,
         jvmArgs: ['-Dkamon.agent.modules.test-module.instrumentations.0=app.kamon.instrumentation.StoppableInstrumentation', '-Dkamon.agent.show-banner=false']],
]

test.doFirst {
    if (KamonAgentTestRunning) {
//        include KamonAgentTestRunning.clazz
        test.filter.includeTestsMatching KamonAgentTestRunning.clazz
        if (KamonAgentTestRunning?.attachKamonAgent ?: true) {
            jvmArgs "-javaagent:${configurations.agent.singleFile}"
        }
        jvmArgs KamonAgentTestRunning?.jvmArgs ?: []
    }
    forkEvery = 1
    maxParallelForks = 5
    println "Running test with: forkEvery=${forkEvery}, maxParallelForks=${maxParallelForks}, allJvmArgs=${allJvmArgs}"
}

singleTests.each {
    def taskName = "${it.taskName}"
    task "${it.taskName}" {
        doFirst {
            println "${taskName} running..."
            test.outputs.upToDateWhen { false }
        }
        finalizedBy(test)
        outputs.upToDateWhen { false }
    }
}

// TODO: run test for each kamonAgentTest.
// see: https://stackoverflow.com/a/41650455/3392786
// see: http://gradle.1045684.n5.nabble.com/calling-task-multiple-times-with-different-parameters-td3290970.html
task allKamonTests {
    singleTests.each { allKamonTests.dependsOn "${it.taskName}" }
}

gradle.taskGraph.whenReady { taskGraph ->
    def result = singleTests.find { taskGraph.hasTask(":agent-test:${it.taskName}") }
    KamonAgentTestRunning = result
}
